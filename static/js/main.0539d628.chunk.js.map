{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Form","props","fetchData","console","log","state","methodtemp","urltemp","fetch","method","headers","then","res","a","obj","entries","key","value","json","resJson","setState","responseJson","Headers","Response","handleClickGO","e","preventDefault","url","_method","handleInputmethod","target","handleInput","id","onChange","this","onClick","htmlFor","className","type","name","React","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+QAOMA,EAAS,WACb,OAAO,gCAAQ,uCAEXC,EAAS,WACb,OAAO,gCAAQ,qDAIXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,UAAY,WACVC,QAAQC,IAAI,QAAS,EAAKC,MAAMC,WAAY,EAAKD,MAAME,SACvDC,MAAM,EAAKH,MAAME,QAAQ,CACvBE,OAAQ,EAAKJ,MAAMC,YAAc,MACjCI,QAAS,CACP,eAAgB,sBAGlBC,KANF,uCAMO,WAAOC,GAAP,2BAAAC,EAAA,sDACCC,EAAM,GADP,cAEoBF,EAAIF,QAAQK,WAFhC,IAEL,2BAAiD,EAAD,uBAAtCC,EAAsC,KAAjCC,EAAiC,KAC9CH,EAAIE,GAAOC,EAHR,8CAKkBL,EAAIM,OALtB,OAKEC,EALF,OAMJ,EAAKC,SAAS,CAAEC,aAAc,CAAEC,QAASR,EAAKS,SAAUJ,KANpD,2CANP,wDAbiB,EA4BnBK,cAAgB,SAAAC,GACdA,EAAEC,iBACF,EAAKN,SAAS,CAACO,IAAK,EAAKtB,MAAME,UAC/B,EAAKa,SAAS,CAAEQ,QAAS,EAAKvB,MAAMC,aACpC,EAAKJ,aAhCY,EAqCnB2B,kBAAoB,SAAAJ,GAClB,IAAIhB,EAASgB,EAAEK,OAAOb,MACtB,EAAKG,SAAS,CAACd,WAAYG,KAvCV,EAyCnBsB,YAAc,SAAAN,GACZ,IAAIE,EAAMF,EAAEK,OAAOb,MACnB,EAAKG,SAAS,CAACb,QAAQoB,KAxCvB,EAAKtB,MAAQ,CACXsB,IAAK,GACLC,QAAS,GACTrB,QAAQ,GACRD,WAAW,GACXe,aAAc,IARC,E,qDA8CjB,OAAQ,yBAAKW,GAAG,YAAW,8BACzB,2BAAOA,GAAG,OAAV,OAAoB,2BAAOC,SAAUC,KAAKH,eAC1C,4BAAQI,QAASD,KAAKV,eAAtB,MACA,6BACA,2BAAOQ,GAAG,QAAQI,QAAQ,OAA1B,IAAiC,2BAAOH,SAAUC,KAAKL,kBAAoBQ,UAAU,QAAQC,KAAK,QAAQN,GAAG,MAAMO,KAAK,YACtHtB,MAAM,QADR,OAEA,2BAAOe,GAAG,QAAQI,QAAQ,QAA1B,IAAkC,2BAAOH,SAAUC,KAAKL,kBAAmBQ,UAAU,QAAOC,KAAK,QAAQN,GAAG,OAAOO,KAAK,YACtHtB,MAAM,SADR,QAEA,2BAAOe,GAAG,QAAQI,QAAQ,OAA1B,IAAiC,2BAAOH,SAAUC,KAAKL,kBAAmBQ,UAAU,QAAOC,KAAK,QAAQN,GAAG,MAAMO,KAAK,YACpHtB,MAAM,QADR,OAEA,2BAAOe,GAAG,QAAQI,QAAQ,UAA1B,IAAoC,2BAAOH,SAAUC,KAAKL,kBAAmBQ,UAAU,QAAOC,KAAK,QAAQN,GAAG,SAASO,KAAK,YAC1HtB,MAAM,WADR,WAGF,6BAASe,GAAG,aACV,6BAAME,KAAK7B,MAAMuB,QAAjB,SAAgCM,KAAK7B,MAAMsB,KAC3C,kBAAC,IAAD,CAAYT,KAAMgB,KAAK7B,MAAMgB,qB,GA9DhBmB,IAAMC,WA+EVC,E,uKATX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUH,IAAMC,WCvEJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,a","file":"static/js/main.0539d628.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './reset.scss';\nimport './header.scss';\nimport './main.scss';\nimport './footer.scss';\nimport JSONPretty from 'react-json-prettify';\nconst Header = () => {\n  return <header><h1>RESTy</h1></header>;\n};\nconst Footer = () => {\n  return <footer><h3>@ 2018 Code Fellows</h3></footer>;\n};\n// const Form = () => {\n// }\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    // init state\n    this.state = {\n      url: '',\n      _method: '',\n      urltemp:'',\n      methodtemp:'',\n      responseJson: {},\n    };\n  }\n  fetchData = () => {\n    console.log(\"fetch\", this.state.methodtemp, this.state.urltemp);\n    fetch(this.state.urltemp,{\n      method: this.state.methodtemp || \"get\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n     .then(async (res) => {\n      const obj = {};\n      for (let [key, value] of res.headers.entries()) {\n        obj[key] = value;\n      }\n       const resJson = await res.json();\n       this.setState({ responseJson: { Headers: obj, Response: resJson }});\n     })\n  }\n  handleClickGO = e => {\n    e.preventDefault();\n    this.setState({url: this.state.urltemp});\n    this.setState({ _method: this.state.methodtemp});\n    this.fetchData();\n    // let data=`{url : ${this.state.urltemp}, _method : ${this.state.methodtemp}}`;\n  // this.request.push(this.data);\n  }\n  // methods inside of class\n  handleInputmethod = e => {\n    let method = e.target.value;\n    this.setState({methodtemp: method});\n  }\n  handleInput = e => {\n    let url = e.target.value;\n    this.setState({urltemp:url}); // re-render \n  }\n  render() {\n    return (<div id=\"form-div\"><form>\n      <label id=\"url\">URL <input onChange={this.handleInput} /></label>\n      <button onClick={this.handleClickGO} >GO</button>\n      <br />\n      <label id=\"label\" htmlFor=\"get\"> <input onChange={this.handleInputmethod}  className='radio' type=\"radio\" id=\"get\" name=\"btnselect\"\n        value=\"get\"/>GET</label>\n      <label id=\"label\" htmlFor=\"post\"> <input onChange={this.handleInputmethod} className='radio'type=\"radio\" id=\"post\" name=\"btnselect\"\n        value=\"post\"/>POST</label>\n      <label id=\"label\" htmlFor=\"put\"> <input onChange={this.handleInputmethod} className='radio'type=\"radio\" id=\"put\" name=\"btnselect\"\n        value=\"put\"/>PUT</label>\n      <label id=\"label\" htmlFor=\"delete\"> <input onChange={this.handleInputmethod} className='radio'type=\"radio\" id=\"delete\" name=\"btnselect\"\n        value=\"delete\"/>DELETE</label>\n    </form>\n    <section id=\"text-area\">\n      <pre>{this.state._method}      {this.state.url}</pre>\n      <JSONPretty json={this.state.responseJson} />\n    </section>     \n    </div>\n    );\n  }\n}\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Form />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}