{"version":3,"sources":["component/footer/footer.js","component/header/header.js","component/results/results.js","component/form/form.js","App.js","serviceWorker.js","index.js"],"names":["Footer","data-testid","className","Component","Header","to","Results","props","json","this","Form","fetchData","method","url","reqBody","fetchMethod","state","fetchUrl","fetchReqBody","setState","isLoading","fetch","headers","body","JSON","stringify","undefined","then","res","a","obj","entries","key","value","resJson","responseJson","Headers","Response","history","localStorage","setItem","catch","err","error","onChangeMethod","e","target","onChangeUrl","onChangeBody","printUrlAndMethod","preventDefault","goMethod","goUrl","goBody","parse","getItem","selectedItem","console","log","item","onSubmit","name","placeholder","onChange","checked","type","htmlFor","style","float","src","App","Fragment","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.00e74cad.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './footer.scss';\n\nexport default class Footer extends Component {\n  render(){\n    return (\n      <footer data-testid=\"footer\" className=\"footer\">\n      </footer>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n\nimport './header.scss';\n\nexport default class Header extends Component {\n  render(){\n    return (\n      <header data-testid=\"header\" className=\"header\">\n        <h1>RESTy</h1>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home Page</Link>\n            </li>\n            <li>\n              <NavLink to=\"/history\">History</NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/help\">Help</NavLink>\n            </li>\n          </ul>\n        </nav>\n      </header>\n    );\n  }\n}","import React, { Component } from 'react';\nimport JSONPretty from 'react-json-prettify';\n\n\nclass Results extends Component {\n  render(props) {\n    return (\n      <div data-testid=\"results\">\n        <JSONPretty json={this.props.json} />\n      </div>\n    );\n  }\n}\n\nexport default Results;","'strict mode';\nimport React, { Component } from 'react';\n\nimport Results from '../results/results';\n\nimport './form.scss';\n\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: 'GET',\n      url: '',\n      reqBody: '',\n      responseJson: {},\n      isLoading: false,\n      history: [],\n    };\n  }\n\n  componentWillMount(){\n    this.setState({history: JSON.parse(localStorage.getItem('history')) || []});\n  }\n\n  componentDidMount(){\n    const selectedItem = this.props.selectedItem;\n    console.log('form selectedItem', selectedItem);\n    if (selectedItem){\n      const item = this.state.history[selectedItem];\n      console.log(item);\n      if (item){\n        this.setState({ method: item.method, url: item.url, reqBody: item.reqBody });\n        this.fetchData(item.method, item.url, item.reqBody);\n      }\n    }\n  }\n\nfetchData = (method, url, reqBody) => {\n  const fetchMethod = this.state.method || method;\n  const fetchUrl = this.state.url || url;\n  const fetchReqBody = this.state.reqBody || reqBody;\n  this.setState({ isLoading: true });\n  fetch(fetchUrl,{\n    method: fetchMethod,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: fetchReqBody ?  JSON.stringify(this.state.reqBody) : undefined,\n  })\n    .then(async (res) => {\n      const obj = {};\n      for (let [key, value] of res.headers.entries()) {\n        obj[key] = value;\n      }\n      const resJson = await res.json();\n      this.setState({ isLoading: false, responseJson: { Headers: obj, Response: resJson }, history: [...this.state.history, { method:this.state.method, url: this.state.url, reqBody: this.state.reqBody }]});\n      localStorage.setItem('history', JSON.stringify(this.state.history));\n    }).catch((err) => {\n      this.setState({ isLoading: false, responseJson: {error: 'check the console'} });\n    });\n}\n\nonChangeMethod = e => {\n  this.setState({ responseJson: {} });\n  this.setState({ method: e.target.value });\n}\nonChangeUrl = e => {\n  this.setState({ responseJson: {} });\n  this.setState({ url: e.target.value });\n}\nonChangeBody = e => {\n  this.setState({ responseJson: {} });\n  this.setState({ reqBody: e.target.value });\n}\n\nprintUrlAndMethod = e => {\n  e.preventDefault();\n  this.setState({ goMethod: this.state.method, goUrl: this.state.url, goBody: this.state.reqBody });\n  this.fetchData();\n};\n\nrender() {\n  return (\n    <div >\n      <form onSubmit={this.printUrlAndMethod} className=\"form\">\n        <br/>\n        <br/>\n        <br/>\n        <input name=\"url\" value={this.state.url} placeholder=\"http://\" onChange={this.onChangeUrl} />\n        <br/>\n        <input checked={this.state.method === 'GET'} type=\"radio\" value=\"GET\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"GET\">GET</label>\n        <input checked={this.state.method === 'POST'} type=\"radio\" value=\"POST\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"POST\">POST</label>\n        <input checked={this.state.method === 'PUT'} type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"PUT\">PUT</label>\n        <input checked={this.state.method === 'DELETE'} type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"DELETE\">DELETE</label>\n        <br/>\n        <br/>\n        <textarea name=\"reqBody\" onChange={this.onChangeBody} value={this.state.reqBody}/>\n        <br/>\n        <button type=\"submit\">Go</button>\n      </form>\n      <div>\n        <span>{this.state.goMethod} &nbsp; {this.state.goUrl} </span>\n      </div>\n      <div style={{ float: 'left' }}>\n        { this.state.isLoading ?<iframe src={'https://giphy.com/embed/ZBQhoZC0nqknSviPqT'}></iframe> : <Results json={this.state.responseJson} />}\n      </div>\n    </div>\n  );\n}\n}","import React from 'react';\nimport './App.css';\nimport './reset.scss';\nimport Footer from './component/footer/footer';\nimport Header from './component/header/header';\nimport Form from './component/form/form';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Form />\n        <Footer /> \n      </React.Fragment>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}